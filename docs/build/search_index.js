var documenterSearchIndex = {"docs":
[{"location":"#Incertus.jl","page":"Incertus.jl","title":"Incertus.jl","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"The package implements several restricted randomization procedures for two- and multi-arm clinical trials, targeting equal or unequal allocation. ","category":"page"},{"location":"#Randomization,-targeting-*equal*-1:1-allocation","page":"Incertus.jl","title":"Randomization, targeting equal  1:1 allocation","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"The following settings are assumed:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"There are two treatment arms investigated in a trial:\nE is an experimental treatment arm.\nC is a control treatment arm.\nn is a total sample size.\nN_1(j) and N_2(j) are treatment numbers, i.e., sample sizes on treatments after the j^textth allocation step (N_1(j)+N_2(j) = j  j = 1 ldots n).\ndelta_j is a treatment indicator:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"delta_j = leftbeginarrayrl\n1 textif treatment E \n0 textif treatment C\nendarrayright ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Under these assumptions, a restricted randomization procedure is defined as","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"beginaligned\nphi_1 = Pr(delta_1 = 1) = 05 \nphi_j = Pr(delta_j = 1delta_1 ldots delta_j-1)  j = 2 ldots n\nendaligned","category":"page"},{"location":"#Randomization,-targeting-*unequal*-allocation-in-*two-arm*-trial-and-*equal*/*unequal*-allocation-in-*multi-arm*-trial","page":"Incertus.jl","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"The following settings are assumed:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"K is a number of treatment arms in a trial (K geq 2).\nmathbfw = left(w_1ldots w_Kright) is the fixed allocation ratio, w_1ldots w_K, where w_k's are positive, not necessarily equal numbers (usually, integers) with the greatest common divisor of 1.\nboldsymbolrho  = left(rho_1 ldots rho_Kright) is a vector of target allocation proportions, where ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"rho_k = fracw_ksum_k=1^Kw_k 0 leq rho_k leq 1 text and sum_k=1^Krho_k = 1","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"n is a total sample size.\nmathbfN(j) = left(N_1(j) ldots N_K(j)right) is a vector of treatment numbers, i.e., numbers of subjects allocated to K treatments after j allocations (1 leq j leq n). \nNote that, in general, N_k(j)'s are random variables with sum_k = 1^KN_k(j) = j.\nmathbfP(j) = left(P_1(j) ldots P_K(j)right) is a vector of randomization (allocation) probabilities for the j^textthsubject. \nNote that 0 leq P_k(j) leq 1, and sum_k = 1^KP_k(j) = 1 for each j = 1 2 ldots n. \nAlso, note that in general, mathbfP(j) depends on mathbfN(j-1) (in generalization of Efron's BCD) or on fracmathbfN(j-1)j-1 (in generalization of Wei's urn design).","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Under these assumptions, a restricted randomization procedure is defined as","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"beginaligned\nP_k(1) = Pr(delta_1 = k) = rho_k  k = 1 ldots K \nP_k(j) = Pr(delta_j = kdelta_1 ldots delta_j-1)  k = 1 ldots K  j = 2 ldots n\nendaligned","category":"page"},{"location":"#Procedures-implemented-in-the-package","page":"Incertus.jl","title":"Procedures implemented in the package","text":"","category":"section"},{"location":"#Completely-Randomized-Design-(CRD)","page":"Incertus.jl","title":"Completely Randomized Design (CRD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"For a two-arm trial and 1:1 target allocation, every subject is allocated to treatments with a fixed probability","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = 05  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"In case of two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation, every subject is allocated to treatments with fixed probabilities that are equal to the target allocation proportions:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"P_k(j) = rho_k  k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"CRD","category":"page"},{"location":"#Incertus.CRD","page":"Incertus.jl","title":"Incertus.CRD","text":"A type of randomization, representing Completely Randomized Design (CRD).\n\nCRD() command initializes a complete randomization procedure, targeting 1:1 allocation.\n\nCRD(w) command initializes a complete randomization procedure, targeting allocation specified by w.\n\nAn output of both commands is an instance of CRD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\ncrd =  CRD()     # complete randomization, targeting 1:1 allocation\n\nw = [1, 2, 3, 4]\ncrd =  CRD(w)    # complete randomization, targeting allocation specified by w","category":"page"},{"location":"#Permuted-Block-Design-(PBD)","page":"Incertus.jl","title":"Permuted Block Design (PBD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Treatment assignments are made in blocks of size bs (for a two-arm trial and 1:1 target allocation, bs= 2lambda; otherwise, bs=lambda W, where W=w_1 + ldots + w_K is a sum of elements of vector mathbfw, target allocation vector. Here, lambda is a parameter of the PBD, representing the number of minimal balanced sets in the block of size bs).","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"At the j^textth allocation step, let k^(j-1) = left lfloor fracj-1bsrightrfloor (lfloor x rfloor is a floor function that returns the greatest integer less than or equal to x). In essence, k^(j-1) is the number of complete blocks among the first j-1 assignments.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"The probabilities of treatment assignments within each block are changed according the current imbalance in a block:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"for a two-arm trial and 1:1 target allocation,  ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = frac05bs(1+k^(j-1))-N_1(j-1)bs(1+k^(j-1))-(j-1)  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"for a two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"P_k(j) = fracw_klambda(1+k^(j-1))-N_k(j-1)bs(1+k^(j-1))-(j-1) k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"See [Zhao and Weng (2011), page 955, equation (5)]","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"PBD","category":"page"},{"location":"#Incertus.PBD","page":"Incertus.jl","title":"Incertus.PBD","text":"A type of rectricted randomization, representing Permuted Block Design (PBD).\n\nPBD(λ) command initializes a permuted block design with a block size  equal to 2λ, targeting 1:1 allocation.\n\nPBD(w, λ) command initializes a permuted block design  with a parameter λ,  targeting allocation specified by w; block size equals to λ*sum(w).\n\nAn output of both commands is an instance of PBD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\npbd = PBD(1)      # PBD, targeting 1:1 allocation, with a block size equal to 2*1 = 2\npbd = PBD(3)      # PBD, targeting 1:1 allocation, with a block size equal to 2*3 = 6\n\nw = [1, 2, 3, 4]\npbd =  PBD(w, 1)  # PBD, targeting allocation specified by w, with a block size sum(w)\npbd =  PBD(w, 3)  # PBD, targeting allocation specified by w, with a block size 3*sum(w)","category":"page"},{"location":"#Random-Allocation-Rule-(Rand)","page":"Incertus.jl","title":"Random Allocation Rule (Rand)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"A version of PBD, when the block size bs equals to the total sample size n. At the j^textth allocation step, probabilities of treatment assignments are calculated as:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"for a two-arm trial and 1:1 target allocation,  ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = frac05n-N_1(j-1)n-(j-1)  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"for a two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"P_k(j) = fracnw_kW-N_k(j-1)n-(j-1) k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"where W=w_1 + ldots + w_K is a sum of elements of vector mathbfw, target allocation vector.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"RAND","category":"page"},{"location":"#Incertus.RAND","page":"Incertus.jl","title":"Incertus.RAND","text":"A type of rectricted randomization, representing Random Allocation Rule (Rand).\n\nRAND(n) command initializes a random allocation rule , targeting 1:1 allocation  in a trial with a sample size equal to n.\n\nRAND(w, n) command initializes a random allocation rule , targeting allocation  specified by w in a trial with a sample size equal to n.\n\nAn output of both commands is an instance of RAND.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\n\nrnd = RAND(50)     # RAND, targeting 1:1 allocation, in a trial with 50 subjects\n\nw = [1, 2, 3, 4]\nrnd =  RAND(w, 50) # RAND, targeting allocation specified by w, in a trial with 50 subjects","category":"page"},{"location":"#Truncated-Binomial-Design-(TBD)","page":"Incertus.jl","title":"Truncated Binomial Design (TBD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Treatment assignments are made with probability 0.5 until one of the treatments receives its quota of fracn2 subjects; thereafter all remaining assignments are made deterministically to the opposite treatment.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"At the j^textthallocation step, let N_1 and N_2 be the numbers of subjects allocated to treatments s.t. N_1+N_2 = j-1 Then,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = leftbeginarrayrl\n05  max(N_1 N_2)  fracn2 \n1  N_1  N2 \n0  N_1  N2\nendarrayright  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"TBD","category":"page"},{"location":"#Incertus.TBD","page":"Incertus.jl","title":"Incertus.TBD","text":"A type of rectricted randomization, representing Truncated Binomial Design (TBD).\n\nTBD(n) command initializes a truncated binomial design, targeting 1:1 allocation  in a trial with a sample size equal to n.\n\nAn output of the command is an isntance of TBD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\ntbd = TBD(50)  # TBD, targeting 1:1 allocation, in a trial with 50 subjects","category":"page"},{"location":"#Efron's-Biased-Coin-Design-(EBCD)","page":"Incertus.jl","title":"Efron's Biased Coin Design (EBCD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"At any allocation step, if treatment numbers N_1 and N_2 are balanced, the next assignment is made with probability 0.5; otherwise, the underrepresented treatment is assigned with probability p, where 05 leq p leq 1 is a fixed and pre-specified parameter that determines the trade-off between balance and randomness.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = leftbeginarrayrl\n05  N_1 = N_2\np  N_1  N2 \n1-p  N_1  N2\nendarrayright  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Note that p=1 corresponds to PBD with block size b=2.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"EBCD","category":"page"},{"location":"#Incertus.EBCD","page":"Incertus.jl","title":"Incertus.EBCD","text":"A type of rectricted randomization, representing Efron's Biased Coin Design (EBCD).\n\nEBCD(p) command initializes Efron's biased coin design with a parameter equal to p, targeting 1:1 allocation.\n\nAn output of the command is an isntance of EBCD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\nebcd = EBCD(2//3) # EBCD, targeting 1:1 allocation, with parameter p=2/3","category":"page"},{"location":"#Adjustable-Biased-Coin-Design-(ABCD)","page":"Incertus.jl","title":"Adjustable Biased Coin Design (ABCD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"An extension of Efron’s BCD. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = leftbeginarrayrl\n05  d = 1 \nfracd^a1+d^a  d  -1 \nfrac11+d^a  d  1 \nendarrayright  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"ABCD","category":"page"},{"location":"#Incertus.ABCD","page":"Incertus.jl","title":"Incertus.ABCD","text":"A type of rectricted randomization, representing Adjustable Biased Coin Design (ABCD).\n\nABCD(a) command initializes adjustable biased coin design with a parameter equal to a,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of ABCD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\nabcd = ABCD(2) # ABCD, targeting 1:1 allocation, with parameter a=2","category":"page"},{"location":"#Generalized-Biased-Coin-Design-(GBCD)","page":"Incertus.jl","title":"Generalized Biased Coin Design (GBCD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"A generalization of Efron’s BCD. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = leftbeginarrayrl\n05  j = 1 \nfracN_2^gammaN_1^gamma+N_2^gamma  j = 1 ldots n\nendarrayright ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"GBCD","category":"page"},{"location":"#Incertus.GBCD","page":"Incertus.jl","title":"Incertus.GBCD","text":"A type of rectricted randomization, representing Generalized Biased Coin Design (GBCD).\n\nGBCD(γ) command initializes generalized biased coin design with a parameter equal to γ,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of GBCD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\ngbcd = GBCD(2) # GBCD, targeting 1:1 allocation, with parameter γ=2","category":"page"},{"location":"#Big-Stick-Design-(BSD)","page":"Incertus.jl","title":"Big Stick Design (BSD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"An example of maximum tolerated imbalance (MTI) procedures. It makes prediction of the future treatment allocations more difficult (even knowing the current sizes of the treatment groups) and controls treatment imbalance at a predefined threshold throughout the experiment. A general MTI procedure specifies a certain boundary for treatment imbalance, say mti, that cannot be exceeded.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = leftbeginarrayrl\n05  d  mti \n0  d = mti \n1  d = -mti \nendarrayright  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"BSD","category":"page"},{"location":"#Incertus.BSD","page":"Incertus.jl","title":"Incertus.BSD","text":"A type of rectricted randomization, representing Big Stick Design (BSD).\n\nBSD(mti) command initializes big stick design with a parameter equal to mti,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of BSD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\nbsd = BSD(3) # BSD, targeting 1:1 allocation, with parameter mti=3","category":"page"},{"location":"#Biased-Coin-Design-With-Imbalance-Tolerance-(BCDWIT)","page":"Incertus.jl","title":"Biased Coin Design With Imbalance Tolerance (BCDWIT)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"A combination of Efron’s BCD and BSD. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = leftbeginarrayrl\n05  d  mti   d = 0 \np  d  mti    d  0 \n1-p  d  mti    d  0 \n0  d = mti \n1  d = -mti \nendarrayright  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"BCDWIT","category":"page"},{"location":"#Incertus.BCDWIT","page":"Incertus.jl","title":"Incertus.BCDWIT","text":"A type of rectricted randomization, representing Biased Coin Design  With Imbalance Tolerance (BCDWIT).\n\nBCDWIT(p, mti) command initializes biased coin design with imbalance tolerance  with parameters equal to p and mti, targeting 1:1 allocation.\n\nAn output of the command is an isntance of BCDWIT.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\nbcdwit = BCDWIT(2//3, 3) # BCDWIT with p = 2/3 and mti=3, targeting 1:1 allocation","category":"page"},{"location":"#Block-Urn-Design-(BUD)","page":"Incertus.jl","title":"Block Urn Design (BUD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"This design was proposed by Zhao and Weng (2011), to provide a more random design than the PBD.  Let N_k(j-1) denote the number of treatment k assignments among first j-1 subjects, and k^(j-1)=minlimits_1 leq k leq K left lfloor fracN_k(j-1)w_kright rfloor denote the number of minimal balanced sets among the first j-1 assignments. Then, at the j^textth allocation step, probabilities of treatment assignments are calculated as:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"for a two-arm trial and 1:1 target allocation,  ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = fraclambda+min(N_1(j-1) N_2(j-1))-N_1(j-1)2(lambda+min(N_1(j-1) N_2(j-1)))-(j-1)  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"for a two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"P_k(j) = fracw_k(lambda+k^(j-1))-N_k(j-1)W(lambda+k^(j-1))-(j-1) k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"where W=w_1 + ldots + w_K is a sum of elements of vector mathbfw, target allocation vector.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"See [Zhao and Weng (2011), page 955, equations (2) and (3)].","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"BUD","category":"page"},{"location":"#Incertus.BUD","page":"Incertus.jl","title":"Incertus.BUD","text":"A type of rectricted randomzation, representing Block Urn Design (BUD).\n\nBUD(λ) command initializes block urn desin with a parameter equal to λ,  targeting 1:1 allocation.\n\nBUD(w, λ) command initializes block urn desin with a parameter equal to λ,  targeting allocation specified by w.\n\nAn output of both commands is an instance of BUD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\n\nbud = BUD(2)      # BUD, targeting 1:1 allocation (λ=2)\n\nw = [1, 2, 3, 4]\nbud =  BUD(w, 2)  # BUD, targeting allocation specified by w (λ=2)","category":"page"},{"location":"#Ehrenfest-Urn-Design-(EUD)","page":"Incertus.jl","title":"Ehrenfest Urn Design (EUD)","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Another example of the maximum tolerated imbalance (MTI) procedure. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"phi_j = frac12left(1-fracdmtiright)  j = 1 ldots n","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"where mti (0) is a parameter of the procedure.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"EUD","category":"page"},{"location":"#Incertus.EUD","page":"Incertus.jl","title":"Incertus.EUD","text":"A type of rectricted randomzation, representing Ehrenfest Urn Design (BUD).\n\nEUD(mti) command initializes Ehrenfest's urn design with a parameter equal to mti,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of EUD.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"using Incertus\neud = EUD(2) # EUD, targeting 1:1 allocation (mti=2)","category":"page"},{"location":"#Funcions-implemented-to-calculate-allocation-probabilities","page":"Incertus.jl","title":"Funcions implemented to calculate allocation probabilities","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::CRD)","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{CRD}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for CRD.\n\nCall\n\nallocation_prb(rnd)\n\nArguments\n\nrnd::CRD: an object, representing Complete Randomization.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::PBD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{PBD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for PBD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::PBD: an object, representing Permuted Block Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::RAND, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{RAND, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for RAND, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::RAND: an object, representing Random Allocation Rule.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::TBD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{TBD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for TBD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::TBD: an object, representing Truncated Binomial Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::EBCD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{EBCD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for EBCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::EBCD: an object, representing Efron's Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::ABCD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{ABCD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for ABCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::ABCD: an object, representing Adjustable Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::GBCD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{GBCD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for GBCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::GBCD: an object, representing Generalized Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::BSD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{BSD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BSD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BSD: an object, representing Big Stick Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::BCDWIT, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{BCDWIT, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BCDWIT, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BCDWIT: an object, representing Biased Coin Design With Imbalance Tolerance.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::BUD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{BUD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BUD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BUD: an object, representing Block Urn Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"allocation_prb(::EUD, ::Vector{Int64})","category":"page"},{"location":"#Incertus.allocation_prb-Tuple{EUD, Vector{Int64}}","page":"Incertus.jl","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for EUD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::EUD: an object, representing Ehrenfest Urn Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"#Simulation","page":"Incertus.jl","title":"Simulation","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"To perform simulations, the following functionality has been implemented:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"SimulatedRandomization","category":"page"},{"location":"#Incertus.SimulatedRandomization","page":"Incertus.jl","title":"Incertus.SimulatedRandomization","text":"A type, representing an output of a simulated randomization procedure.\n\nA command SimulatedRandomization(trt, prb) initializes an instance of SimulatedRandomization:\n\ntrt is a matrix of size ntimes S, representing treatment assignments;\nprb is an array of size ntimes Ktimes S, representing allocation probabilities,\n\nwhere \n\nn is the number of subjects simulated;\nK is the number of treatments simulated (equal to the length of the target allocation vector);\nS is the number of simulations performed.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"simulate(rnd::Union{CompleteRandomization, RestrictedRandomization}, nsbj::Int64, nsim::Int64, seed::Int64 = 314159)","category":"page"},{"location":"#Incertus.simulate","page":"Incertus.jl","title":"Incertus.simulate","text":"Function simulates randomization procedures simulate(rnd, nsbj, nsim, seed)\n\nArguments\n\nrnd::Union{CompleteRandomization, RestrictedRandomization}: an object, representing \n\na randomization procedure to be simulated, an instance of CompleteRandomization or  RestrictedRandomization.\n\nnsbj::Int64: number of subjects simulated.\nnsim::Int64: number of simulations performed.\nseed::Int64: a random seed (for reproducibility); a default is set to 314159.\n\nResult\n\nan object, representing simlated randomization, an instance of Simulatedrandomization.\n\n\n\n\n\n","category":"function"},{"location":"#Operational-characteristics","page":"Incertus.jl","title":"Operational characteristics","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Several measures of imbalance and randomness have been implemented in the package:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Measures of imbalance:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"mathbfEleftD(j)right – expected absolute imbalance at the j^textth allocation step.\nmathbfEleftD(j)^2right=mathbfvarleftD(j)right – variance of imbalance at the j^textth allocation step.\nmathbfEleftmaxlimits_1leq m leq jD(m)right – expected maximum imbalance over the first j allocation steps.\nImb(j) = frac1jsumlimits_m=1^jfracmathbfEleftD(m)^2rightm – a cumulative average loss at the j^textth allocation step.","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Measures of randomness:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"EPCG_conv(j) = frac1jsumlimits_m=1^jmathbfEleftG_mright – expected proportion of correct guesses over first j allocation steps under the convergence guessing strategy, where G_m is a random variable taking values based on the investigator's correct guess at the m^textth allocation step, given current imbalance, D(m-1):","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"G_m = left\nbeginarrayrl\n1  D(m-1)  0 \n05  D(m-1) = 0 \n0  D(m-1)  0\nendarray  \nright  ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"EPCG_max(j) = frac1jsumlimits_m=1^jmathbfEleftwidetildeG_mright – expected proportion of correct guesses over first j allocation steps under the maximum probability guessing strategy, where widetildeG_m is a random variable taking values based on the investigator's correct guess at the m^textth allocation step, given allocation probability, phi_m:","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"widetildeG_m = left\nbeginarrayrl\n1  phi_m  05 \n05  phi_m = 05 \n0  phi_m  05\nendarray  \nright  ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"PD(j) = frac1jsumlimits_m=1^jPr(phi_min0 1) – expected proportion of deterministic assignments over first allocation steps.\nFI(j) = frac4jsumlimits_m=1^jmathbfEleftphi_m-05right – forcing index, which takes values on a scale 0–1. FI(j) = 0 forall j for CRD and FI(j) = 1 for PBD with a block size bs=2, assuming j is even (most balanced design). ","category":"page"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"Below, there are  functions available for calculating operational characteristics.","category":"page"},{"location":"#Expected-absolute-imbalance","page":"Incertus.jl","title":"Expected absolute imbalance","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_expected_abs_imb(sr::SimulatedRandomization)","category":"page"},{"location":"#Incertus.calc_expected_abs_imb-Tuple{SimulatedRandomization}","page":"Incertus.jl","title":"Incertus.calc_expected_abs_imb","text":"Function calculates expected absolute imbalance vs. allocation step.\n\nCall\n\ncalc_expected_abs_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA vector of expected absolute imbalance values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#Variance-of-imbalance","page":"Incertus.jl","title":"Variance of imbalance","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_variance_of_imb(sr::SimulatedRandomization)","category":"page"},{"location":"#Incertus.calc_variance_of_imb-Tuple{SimulatedRandomization}","page":"Incertus.jl","title":"Incertus.calc_variance_of_imb","text":"Function calculates variance of imbalance vs. allocation step.\n\nCall\n\ncalc_variance_of_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA vector of variance of imbalance values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#Expected-maximum-imbalance-over-first-allocation-steps","page":"Incertus.jl","title":"Expected maximum imbalance over first allocation steps","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_expected_max_abs_imb(sr::SimulatedRandomization)","category":"page"},{"location":"#Incertus.calc_expected_max_abs_imb-Tuple{SimulatedRandomization}","page":"Incertus.jl","title":"Incertus.calc_expected_max_abs_imb","text":"Function calculates expected maximum absolute imbalance over first allocations vs. allocation step.\n\nCall\n\ncalc_expected_max_abs_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA vector of expected maximum absolute imbalance over firat allocations values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#A-cumulative-average-loss-at-the-first-allocation-steps","page":"Incertus.jl","title":"A cumulative average loss at the first allocation steps","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_cummean_loss(sr::SimulatedRandomization)","category":"page"},{"location":"#Incertus.calc_cummean_loss-Tuple{SimulatedRandomization}","page":"Incertus.jl","title":"Incertus.calc_cummean_loss","text":"Function calculates cumulative average loss vs. allocation step.\n\nCall\n\ncalc_expected_abs_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA vector of cumulative average loss values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#Expected-proportion-of-correct-guesses-over-first-allocation-steps-under-*two*-different-guessing-strategies","page":"Incertus.jl","title":"Expected proportion of correct guesses over first allocation steps under two different guessing strategies","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_cummean_epcg(sr::SimulatedRandomization, gs::String)","category":"page"},{"location":"#Incertus.calc_cummean_epcg-Tuple{SimulatedRandomization, String}","page":"Incertus.jl","title":"Incertus.calc_cummean_epcg","text":"Function calculates cumulative averages of expected proportions of correct guesses vs. allocation step.\n\nCall\n\ncalc_cummean_epcg(sr, gs)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\ngs::String: guessing strategy; accepts two values: \"C\" (corresponds to the \n\nconvergence guessing strategy) of \"MP\" (corresponds to the maximum probability  guessing strategy).\n\nResult\n\nA vector of cumulative averages of the expected proportions of correct guesses values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#Expected-proportion-of-deterministic-assignments-over-first-allocation-steps","page":"Incertus.jl","title":"Expected proportion of deterministic assignments over first allocation steps","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_cummean_pda(sr::SimulatedRandomization)","category":"page"},{"location":"#Incertus.calc_cummean_pda-Tuple{SimulatedRandomization}","page":"Incertus.jl","title":"Incertus.calc_cummean_pda","text":"Function calculates cumulative averages of the proportions of deterministic assignments vs. allocation step.\n\nCall\n\ncalc_cummean_pda(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA vector of the cumulative averages of the proportions of deterministic assignmnets values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#Forcing-index","page":"Incertus.jl","title":"Forcing index","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"calc_fi(sr::SimulatedRandomization)","category":"page"},{"location":"#Incertus.calc_fi-Tuple{SimulatedRandomization}","page":"Incertus.jl","title":"Incertus.calc_fi","text":"Function calculates forcing index vs. allocation step.\n\nCall\n\ncalc_fi(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA vector of the forcing index values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"#Auxiliary-functions","page":"Incertus.jl","title":"Auxiliary functions","text":"","category":"section"},{"location":"","page":"Incertus.jl","title":"Incertus.jl","text":"set_label(::Union{CompleteRandomization, RestrictedRandomization})","category":"page"},{"location":"#Incertus.set_label-Tuple{Union{CompleteRandomization, RestrictedRandomization}}","page":"Incertus.jl","title":"Incertus.set_label","text":"Function sets a label for a randomization procedure.\n\nAn example:\n\njulia> w = [1, 2, 3, 4]\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\njulia> dlr_proc = DLR(w, 2)\nDLR(2): restricted randomization procedure, targeting 1:2:3:4 allocation in 4-arm trial.\n\njulia> label = set_label(dlr_proc)\n\"DLR(2)\"\n\n\n\n\n\n","category":"method"}]
}
