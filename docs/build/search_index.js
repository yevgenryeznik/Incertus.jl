var documenterSearchIndex = {"docs":
[{"location":"doc-02-unequal.html#Randomization,-targeting-*unequal*-allocation-in-*two-arm*-trial-and-*equal*/*unequal*-allocation-in-*multi-arm*-trial","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"","category":"section"},{"location":"doc-02-unequal.html","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"The following settings are assumed:","category":"page"},{"location":"doc-02-unequal.html","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"K is a number of treatment arms in a trial (K geq 2).\nmathbfw = left(w_1ldots w_Kright) is the fixed allocation ratio, w_1ldots w_K, where w_k's are positive, not necessarily equal numbers (usually, integers) with the greatest common divisor of 1.\nboldsymbolrho  = left(rho_1 ldots rho_Kright) is a vector of target allocation proportions, where ","category":"page"},{"location":"doc-02-unequal.html","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"rho_k = fracw_ksum_k=1^Kw_k 0 leq rho_k leq 1 text and sum_k=1^Krho_k = 1","category":"page"},{"location":"doc-02-unequal.html","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"n is a total sample size.\nmathbfN(j) = left(N_1(j) ldots N_K(j)right) is a vector of treatment numbers, i.e., numbers of subjects allocated to K treatments after j allocations (1 leq j leq n). \nNote that, in general, N_k(j)'s are random variables with sum_k = 1^KN_k(j) = j.\nmathbfP(j) = left(P_1(j) ldots P_K(j)right) is a vector of randomization (allocation) probabilities for the j^textthsubject. \nNote that 0 leq P_k(j) leq 1, and sum_k = 1^KP_k(j) = 1 for each j = 1 2 ldots n. \nAlso, note that in general, mathbfP(j) depends on mathbfN(j-1) (in generalization of Efron's BCD) or on fracmathbfN(j-1)j-1 (in generalization of Wei's urn design).","category":"page"},{"location":"doc-02-unequal.html","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"Under these assumptions, a restricted randomization procedure is defined as","category":"page"},{"location":"doc-02-unequal.html","page":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","title":"Randomization, targeting unequal allocation in two-arm trial and equal/unequal allocation in multi-arm trial","text":"beginaligned\nP_k(1) = Pr(delta_1 = k) = rho_k  k = 1 ldots K \nP_k(j) = Pr(delta_j = kdelta_1 ldots delta_j-1)  k = 1 ldots K  j = 2 ldots n\nendaligned","category":"page"},{"location":"doc-03-implemented-procs.html#Procedures-implemented-in-the-package","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"","category":"section"},{"location":"doc-03-implemented-procs.html#Completely-Randomized-Design-(CRD)","page":"Procedures implemented in the package","title":"Completely Randomized Design (CRD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"For a two-arm trial and 1:1 target allocation, every subject is allocated to treatments with a fixed probability","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = 05  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"In case of two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation, every subject is allocated to treatments with fixed probabilities that are equal to the target allocation proportions:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"P_k(j) = rho_k  k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"CRD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.CRD","page":"Procedures implemented in the package","title":"Incertus.CRD","text":"A type of randomization, representing Completely Randomized Design (CRD).\n\nCRD() command initializes a complete randomization procedure, targeting 1:1 allocation.\n\nCRD(w) command initializes a complete randomization procedure, targeting allocation specified by w.\n\nAn output of both commands is an instance of CRD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\ncrd =  CRD()     # complete randomization, targeting 1:1 allocation\n\nw = [1, 2, 3, 4]\ncrd =  CRD(w)    # complete randomization, targeting allocation specified by w","category":"page"},{"location":"doc-03-implemented-procs.html#Permuted-Block-Design-(PBD)","page":"Procedures implemented in the package","title":"Permuted Block Design (PBD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"Treatment assignments are made in blocks of size bs (for a two-arm trial and 1:1 target allocation, bs= 2lambda; otherwise, bs=lambda W, where W=w_1 + ldots + w_K is a sum of elements of vector mathbfw, target allocation vector. Here, lambda is a parameter of the PBD, representing the number of minimal balanced sets in the block of size bs).","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"At the j^textth allocation step, let k^(j-1) = left lfloor fracj-1bsrightrfloor (lfloor x rfloor is a floor function that returns the greatest integer less than or equal to x). In essence, k^(j-1) is the number of complete blocks among the first j-1 assignments.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"The probabilities of treatment assignments within each block are changed according the current imbalance in a block:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"for a two-arm trial and 1:1 target allocation,  ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = frac05bs(1+k^(j-1))-N_1(j-1)bs(1+k^(j-1))-(j-1)  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"for a two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"P_k(j) = fracw_klambda(1+k^(j-1))-N_k(j-1)bs(1+k^(j-1))-(j-1) k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"See [Zhao and Weng (2011), page 955, equation (5)]","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"PBD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.PBD","page":"Procedures implemented in the package","title":"Incertus.PBD","text":"A type of rectricted randomization, representing Permuted Block Design (PBD).\n\nPBD(λ) command initializes a permuted block design with a block size  equal to 2λ, targeting 1:1 allocation.\n\nPBD(w, λ) command initializes a permuted block design  with a parameter λ,  targeting allocation specified by w; block size equals to λ*sum(w).\n\nAn output of both commands is an instance of PBD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\npbd = PBD(1)      # PBD, targeting 1:1 allocation, with a block size equal to 2*1 = 2\npbd = PBD(3)      # PBD, targeting 1:1 allocation, with a block size equal to 2*3 = 6\n\nw = [1, 2, 3, 4]\npbd =  PBD(w, 1)  # PBD, targeting allocation specified by w, with a block size sum(w)\npbd =  PBD(w, 3)  # PBD, targeting allocation specified by w, with a block size 3*sum(w)","category":"page"},{"location":"doc-03-implemented-procs.html#Random-Allocation-Rule-(Rand)","page":"Procedures implemented in the package","title":"Random Allocation Rule (Rand)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A version of PBD, when the block size bs equals to the total sample size n. At the j^textth allocation step, probabilities of treatment assignments are calculated as:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"for a two-arm trial and 1:1 target allocation,  ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = frac05n-N_1(j-1)n-(j-1)  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"for a two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"P_k(j) = fracnw_kW-N_k(j-1)n-(j-1) k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where W=w_1 + ldots + w_K is a sum of elements of vector mathbfw, target allocation vector.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"RAND","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.RAND","page":"Procedures implemented in the package","title":"Incertus.RAND","text":"A type of rectricted randomization, representing Random Allocation Rule (Rand).\n\nRAND(n) command initializes a random allocation rule , targeting 1:1 allocation  in a trial with a sample size equal to n.\n\nRAND(w, n) command initializes a random allocation rule , targeting allocation  specified by w in a trial with a sample size equal to n.\n\nAn output of both commands is an instance of RAND.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\n\nrnd = RAND(50)     # RAND, targeting 1:1 allocation, in a trial with 50 subjects\n\nw = [1, 2, 3, 4]\nrnd =  RAND(w, 50) # RAND, targeting allocation specified by w, in a trial with 50 subjects","category":"page"},{"location":"doc-03-implemented-procs.html#Truncated-Binomial-Design-(TBD)","page":"Procedures implemented in the package","title":"Truncated Binomial Design (TBD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"Treatment assignments are made with probability 0.5 until one of the treatments receives its quota of fracn2 subjects; thereafter all remaining assignments are made deterministically to the opposite treatment.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"At the j^textthallocation step, let N_1 and N_2 be the numbers of subjects allocated to treatments s.t. N_1+N_2 = j-1 Then,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  max(N_1 N_2)  fracn2 \n1  N_1  N2 \n0  N_1  N2\nendarrayright  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"TBD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.TBD","page":"Procedures implemented in the package","title":"Incertus.TBD","text":"A type of rectricted randomization, representing Truncated Binomial Design (TBD).\n\nTBD(n) command initializes a truncated binomial design, targeting 1:1 allocation  in a trial with a sample size equal to n.\n\nAn output of the command is an isntance of TBD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\ntbd = TBD(50)  # TBD, targeting 1:1 allocation, in a trial with 50 subjects","category":"page"},{"location":"doc-03-implemented-procs.html#Truncated-Multinomial-Design-(TMD)","page":"Procedures implemented in the package","title":"Truncated Multinomial Design (TMD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"Treatment assignments are made according to CRD with probabilities P_k(j) = rho_k, j=1 2 ldots; k = 1 2 ldots K,  until one of the treatments (k_1) receives its quota of nw_k_1 subjects. Next, the randomization process switches to the remaining K-1 treatments with adjusted multinomial probabilities until some other treatment (k_2) receives its target quota of nw_k_2 subjects, and so on, until only one incomplete treatment is left. The remaining subjects in the sequence are deterministically assigned to this treatment. ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"For 11 target allocation, TMD is simular to TBD.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"TMD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.TMD","page":"Procedures implemented in the package","title":"Incertus.TMD","text":"A type of rectricted randomization, representing Truncated Multiinomial Design (TMD).\n\nTMD(n) command initializes a truncated multinomial design, targeting 1:1 allocation in a trial with a sample size equal to n. (In this case, it is similar to TBD).\n\nTMD(w, n) command initializes a truncated multinomial design, targeting allocation specified by w in a trial with a sample size equal to n.\n\nAn output of the command is an isntance of TMD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\ntmd = TMD(50)     # TMD, targeting 1:1 allocation, in a trial with 50 subjects\n\nw = [1, 2, 3, 4]\nrnd =  TMD(w, 50) # TMD, targeting allocation specified by w, in a trial with 50 subjects","category":"page"},{"location":"doc-03-implemented-procs.html#Efron's-Biased-Coin-Design-(EBCD)","page":"Procedures implemented in the package","title":"Efron's Biased Coin Design (EBCD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"At any allocation step, if treatment numbers N_1 and N_2 are balanced, the next assignment is made with probability 0.5; otherwise, the underrepresented treatment is assigned with probability p, where 05 leq p leq 1 is a fixed and pre-specified parameter that determines the trade-off between balance and randomness.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  N_1 = N_2\np  N_1  N2 \n1-p  N_1  N2\nendarrayright  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"Note that p=1 corresponds to PBD with block size b=2.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"EBCD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.EBCD","page":"Procedures implemented in the package","title":"Incertus.EBCD","text":"A type of rectricted randomization, representing Efron's Biased Coin Design (EBCD).\n\nEBCD(p) command initializes Efron's biased coin design with a parameter equal to p, targeting 1:1 allocation.\n\nAn output of the command is an isntance of EBCD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nebcd = EBCD(2//3) # EBCD, targeting 1:1 allocation, with parameter p=2/3","category":"page"},{"location":"doc-03-implemented-procs.html#Adjustable-Biased-Coin-Design-(ABCD)","page":"Procedures implemented in the package","title":"Adjustable Biased Coin Design (ABCD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"An extension of Efron’s BCD. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  d = 1 \nfracd^a1+d^a  d  -1 \nfrac11+d^a  d  1 \nendarrayright  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"ABCD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.ABCD","page":"Procedures implemented in the package","title":"Incertus.ABCD","text":"A type of rectricted randomization, representing Adjustable Biased Coin Design (ABCD).\n\nABCD(a) command initializes adjustable biased coin design with a parameter equal to a,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of ABCD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nabcd = ABCD(2) # ABCD, targeting 1:1 allocation, with parameter a=2","category":"page"},{"location":"doc-03-implemented-procs.html#Generalized-Biased-Coin-Design-(GBCD)","page":"Procedures implemented in the package","title":"Generalized Biased Coin Design (GBCD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A generalization of Efron’s BCD. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  j = 1 \nfracN_2^gammaN_1^gamma+N_2^gamma  j = 1 ldots n\nendarrayright ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"GBCD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.GBCD","page":"Procedures implemented in the package","title":"Incertus.GBCD","text":"A type of rectricted randomization, representing Generalized Biased Coin Design (GBCD).\n\nGBCD(γ) command initializes generalized biased coin design with a parameter equal to γ,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of GBCD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\ngbcd = GBCD(2) # GBCD, targeting 1:1 allocation, with parameter γ=2","category":"page"},{"location":"doc-03-implemented-procs.html#Big-Stick-Design-(BSD)","page":"Procedures implemented in the package","title":"Big Stick Design (BSD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"An example of maximum tolerated imbalance (MTI) procedures. It makes prediction of the future treatment allocations more difficult (even knowing the current sizes of the treatment groups) and controls treatment imbalance at a predefined threshold throughout the experiment. A general MTI procedure specifies a certain boundary for treatment imbalance, say mti, that cannot be exceeded.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  d  mti \n0  d = mti \n1  d = -mti \nendarrayright  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"BSD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.BSD","page":"Procedures implemented in the package","title":"Incertus.BSD","text":"A type of rectricted randomization, representing Big Stick Design (BSD).\n\nBSD(mti) command initializes big stick design with a parameter equal to mti,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of BSD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nbsd = BSD(3) # BSD, targeting 1:1 allocation, with parameter mti=3","category":"page"},{"location":"doc-03-implemented-procs.html#Biased-Coin-Design-With-Imbalance-Tolerance-(BCDWIT)","page":"Procedures implemented in the package","title":"Biased Coin Design With Imbalance Tolerance (BCDWIT)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A combination of Efron’s BCD and BSD. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  d  mti   d = 0 \np  d  mti    d  0 \n1-p  d  mti    d  0 \n0  d = mti \n1  d = -mti \nendarrayright  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"BCDWIT","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.BCDWIT","page":"Procedures implemented in the package","title":"Incertus.BCDWIT","text":"A type of rectricted randomization, representing Biased Coin Design  With Imbalance Tolerance (BCDWIT).\n\nBCDWIT(p, mti) command initializes biased coin design with imbalance tolerance  with parameters equal to p and mti, targeting 1:1 allocation.\n\nAn output of the command is an isntance of BCDWIT.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nbcdwit = BCDWIT(2//3, 3) # BCDWIT with p = 2/3 and mti=3, targeting 1:1 allocation","category":"page"},{"location":"doc-03-implemented-procs.html#Block-Urn-Design-(BUD)","page":"Procedures implemented in the package","title":"Block Urn Design (BUD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"This design was proposed by Zhao and Weng (2011), to provide a more random design than the PBD.  Let N_k(j-1) denote the number of treatment k assignments among first j-1 subjects, and k^(j-1)=minlimits_1 leq k leq K left lfloor fracN_k(j-1)w_kright rfloor denote the number of minimal balanced sets among the first j-1 assignments. Then, at the j^textth allocation step, probabilities of treatment assignments are calculated as:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"for a two-arm trial and 1:1 target allocation,  ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = fraclambda+min(N_1(j-1) N_2(j-1))-N_1(j-1)2(lambda+min(N_1(j-1) N_2(j-1)))-(j-1)  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"for a two-arm trial with unequal allocation or multi-arm trial with equal/unequal allocation,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"P_k(j) = fracw_k(lambda+k^(j-1))-N_k(j-1)W(lambda+k^(j-1))-(j-1) k = 1 ldots K  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where W=w_1 + ldots + w_K is a sum of elements of vector mathbfw, target allocation vector.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"See [Zhao and Weng (2011), page 955, equations (2) and (3)].","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"BUD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.BUD","page":"Procedures implemented in the package","title":"Incertus.BUD","text":"A type of rectricted randomzation, representing Block Urn Design (BUD).\n\nBUD(λ) command initializes block urn desin with a parameter equal to λ,  targeting 1:1 allocation.\n\nBUD(w, λ) command initializes block urn desin with a parameter equal to λ,  targeting allocation specified by w.\n\nAn output of both commands is an instance of BUD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\n\nbud = BUD(2)      # BUD, targeting 1:1 allocation (λ=2)\n\nw = [1, 2, 3, 4]\nbud =  BUD(w, 2)  # BUD, targeting allocation specified by w (λ=2)","category":"page"},{"location":"doc-03-implemented-procs.html#Ehrenfest-Urn-Design-(EUD)","page":"Procedures implemented in the package","title":"Ehrenfest Urn Design (EUD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"Another example of the maximum tolerated imbalance (MTI) procedure. At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1, and imbalance d = N_1-N_2,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = frac12left(1-fracdmtiright)  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where mti (0) is a parameter of the procedure.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"EUD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.EUD","page":"Procedures implemented in the package","title":"Incertus.EUD","text":"A type of rectricted randomzation, representing Ehrenfest Urn Design (BUD).\n\nEUD(mti) command initializes Ehrenfest's urn design with a parameter equal to mti,  targeting 1:1 allocation.\n\nAn output of the command is an isntance of EUD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\neud = EUD(2) # EUD, targeting 1:1 allocation (mti=2)","category":"page"},{"location":"doc-03-implemented-procs.html#Bayesian-Biased-Coin-Design-(BBCD)","page":"Procedures implemented in the package","title":"Bayesian Biased Coin Design (BBCD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A special class of biased coind designs (BCDs). At the j^textth allocation step, given treatment numbers N_1 and N_2, s.t. N_1+N_2 = j-1,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"phi_j = leftbeginarrayrl\n05  j = 1 \n1  j = 2    N_1 = 0 \n0  j = 2    N_1 = 1 \nfracleft(1 + fracN_2nN_1right)^frac1gammaleft(1 + fracN_2nN_1right)^frac1gamma + left(1 + fracN_1nN_2right)^frac1gamma  j geq 3 \nendarrayright  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where gamma (0) is a parameter of the procedure, and n is a sample size (pre-specified).","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"BBCD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.BBCD","page":"Procedures implemented in the package","title":"Incertus.BBCD","text":"A type of rectricted randomzation, representing Bayesian Biased Coin Design (BBCD).\n\nBBCD(γ, n) command initializes Bayesian biased coin design with a parameter equal to γ,  targeting 1:1 allocation in a trial with a sample size equal to n.\n\nAn output of the command is an isntance of BBCD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nbbcd = BBCD(0.1, 40) # BBCD, targeting 1:1 allocation (γ=2, n = 40)","category":"page"},{"location":"doc-03-implemented-procs.html#Mass-Weighted-Urn-Design-(MWUD)","page":"Procedures implemented in the package","title":"Mass Weighted Urn Design (MWUD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A randomization procedure that can be used fo for two- and multi-arm trials, targeting both equal and unequal allocation. At the j^textth allocation step, given K treatments and corresponding treatment numbers N_1(j-1) ldots N_K(j-1), s.t. sum_k = 1^KN_k(j-1) = j-1,","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"P_k(j) = fracmaxleftalpharho_k-N_k(j-1) +(j-1)rho_k  0rightsum_k=1^Kmaxleftalpharho_k-N_k(j-1) +(j-1)rho_k  0right  j = 1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where alpha (0) is a parameter of the procedure that controls maximum tolerated imbalance.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"MWUD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.MWUD","page":"Procedures implemented in the package","title":"Incertus.MWUD","text":"A type of rectricted randomization, representing Mass Weighted Urn Design (MWUD).\n\nMWUD(α) command initializes mass weighted urn design with a parameter equal to α, targeting 1:1 allocation.\n\nMWUD(w, α) command initializes mass weighted urn design with a parameter equal to α, targeting allocation specified by w.\n\nAn output of the command is an isntance of MWUD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nmwud = MWUD(2)     # MWUD, targeting 1:1 allocation (α=2)\n\nw = [1, 2, 3, 4]   # target allocation ratio\nmwud =  MWUD(w, 2) # MWUD, targeting 1:2:3:4 allocation (α=2)","category":"page"},{"location":"doc-03-implemented-procs.html#Doubly-Adaptive-Biased-Coin-Design-(DBCD)","page":"Procedures implemented in the package","title":"Doubly-Adaptive Biased Coin Design (DBCD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A randomization procedure that can be used fo for two- and multi-arm trials with K treatments, targeting both equal and unequal allocation. Initial treatment assignments (j=1 2 ldots m_0) are made completely at random (P_k(j)=rho_k, k=1 2 ldots K) until each group has at least one subject (i.e., N_k(m_0)0). Subsequent treatment assignments are made as follows:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"P_k(j) = fracrho_kleft(rho_kfracN_k(j-1)j-1right)^gammasum_k=1^Krho_kleft(rho_kfracN_k(j-1)j-1right)^gamma  j = m_0+1 ldots n","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where gamma (0) is a parameter of the procedure.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"DBCD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.DBCD","page":"Procedures implemented in the package","title":"Incertus.DBCD","text":"A type of rectricted randomization, representing Doubly-Adaptive Biased Coin Design (DBCD).\n\nDBCD(γ) command initializes doubly-adaptive biased coin design with a parameter equal to γ, targeting 1:1 allocation.\n\nDBCD(w, γ) command initializes doubly-adaptive biased coin design with a parameter equal to γ, targeting allocation specified by w.\n\nAn output of the command is an isntance of DBCD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\ndbcd = DBCD(2)     # DBCD, targeting 1:1 allocation (γ=2)\n\nw = [1, 2, 3, 4]   # target allocation ratio\ndbcd =  DBCD(w, 2) # DBCD, targeting 1:2:3:4 allocation (γ=2)","category":"page"},{"location":"doc-03-implemented-procs.html#Maximum-Entropy-Constraint-Balance-Randomization-(MaxEnt)","page":"Procedures implemented in the package","title":"Maximum Entropy Constraint Balance Randomization (MaxEnt)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"A randomization procedure that can be used fo for two- and multi-arm trials with K treatments, targeting both equal and unequal allocation. ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"Consider a point in the trial when j-1 subjects have been randomized among the Ktreatments, and let denote the corresponding treatment numbers as N_k(j-1) (k=1 ldots K and sum_k_1^KN_k(k-1) = j-1). At the j^textth allocation step, the randomization rule is defined as follows: ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"a) For k=1 2 ldots K, compute B_k, the hypothetical \"lack of balnce\", which results from assigning the j^textth subject to treatment k:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"B_k = maxlimits_1leq i leq KleftfracN^(k)_i(j)k-rho_kright text where N^(k)_i(j) = left\nbeginarrayrl\nN_i(j-1) + 1  i = k \nN_i(j-1)  i ne k\nendarray\nright ","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"b) The treatment randomization probabilities for the j^textth subject left(P_1(j) P_2(j) ldots P_K(j)right) are determined as a solution to the constrained optimization problem:","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"beginaligned\ntextminimizesum_k=1^KP_k(j)logleft(fracP_k(j)rho_kright) \ntextsubject tosum_k=1^KB_kP_k(j) leq eta B_(1) + (1-eta)sum_k=1^KB_krho_k \ntextandsum_k=1^KP_k(j) = 1  0leq P_k(j) leq 1  k = 1 2 ldots K\nendaligned","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"where B_(1)=minlimits_1leq k leq KB_k, and eta left(in 0 1right) is a parameter of the procedure that controls degree of randomness.","category":"page"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"MaxEnt","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.MaxEnt","page":"Procedures implemented in the package","title":"Incertus.MaxEnt","text":"A type of rectricted randomization, representing Maximum Entopy Constraint Balance Randomization (MaxEnt).\n\nMaxEnt(η) command initializes MaxEnt design with a parameter equal to η, targeting 1:1 allocation.\n\nMaxEnt(w, η) command initializes MaxEnt design with a parameter equal to η, targeting allocation specified by w.\n\nAn output of the command is an isntance of MaxEnt.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\nmaxent = MaxEnt(0.5)     # MaxEnt, targeting 1:1 allocation (η=2)\n\nw = [1, 2, 3, 4]   # target allocation ratio\nmaxent = MaxEnt(w, 0.5)  # MaxEnt, targeting 1:2:3:4 allocation (η=2)","category":"page"},{"location":"doc-03-implemented-procs.html#Drop-the-Loser-Urn-Design-(DLUD)","page":"Procedures implemented in the package","title":"Drop-the-Loser Urn Design (DLUD)","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"DLUD","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.DLUD","page":"Procedures implemented in the package","title":"Incertus.DLUD","text":"A type of rectricted randomization, representing Drop-the-Loser Urn Design (DLUD).\n\nDLUD(a) command initializes drop-the-loser urn design with a parameter equal to a, targeting 1:1 allocation.\n\nDLUD(w, a) command initializes drop-the-loser urn design with a parameter equal to a, targeting allocation specified by w.\n\nAn output of the command is an isntance of DLUD.\n\n\n\n\n\n","category":"type"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"using Incertus\ndlud = DLUD(2)     # DLUD, targeting 1:1 allocation (a=2)\n\nw = [1, 2, 3, 4]   # target allocation ratio\ndlud = DLUD(w, 2)  # DLUD, targeting 1:2:3:4 allocation (a=2)","category":"page"},{"location":"doc-03-implemented-procs.html#Funcions-implemented-to-calculate-allocation-probabilities","page":"Procedures implemented in the package","title":"Funcions implemented to calculate allocation probabilities","text":"","category":"section"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::CRD)","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{CRD}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for CRD.\n\nCall\n\nallocation_prb(rnd)\n\nArguments\n\nrnd::CRD: an object, representing Complete Randomization.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::PBD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{PBD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for PBD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::PBD: an object, representing Permuted Block Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::RAND, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{RAND, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for RAND, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::RAND: an object, representing Random Allocation Rule.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::TBD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{TBD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for TBD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::TBD: an object, representing Truncated Binomial Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::TMD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{TMD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for TMD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::TMD: an object, representing Truncated Multinomial Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::EBCD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{EBCD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for EBCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::EBCD: an object, representing Efron's Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::ABCD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{ABCD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for ABCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::ABCD: an object, representing Adjustable Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::GBCD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{GBCD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for GBCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::GBCD: an object, representing Generalized Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::BSD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{BSD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BSD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BSD: an object, representing Big Stick Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::BCDWIT, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{BCDWIT, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BCDWIT, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BCDWIT: an object, representing Biased Coin Design With Imbalance Tolerance.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::BUD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{BUD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BUD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BUD: an object, representing Block Urn Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::EUD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{EUD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for EUD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::EUD: an object, representing Ehrenfest Urn Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::BBCD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{BBCD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for BBCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::BBCD: an object, representing Bayesian Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::MWUD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{MWUD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for MWUD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::MWUD: an object, representing Mass Weighted Urn Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::DBCD, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{DBCD, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for DBCD, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::DBCD: an object, representing Doubly-Adaptive Biased Coin Design.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-03-implemented-procs.html","page":"Procedures implemented in the package","title":"Procedures implemented in the package","text":"allocation_prb(::MaxEnt, ::Vector{Int64})","category":"page"},{"location":"doc-03-implemented-procs.html#Incertus.allocation_prb-Tuple{MaxEnt, Vector{Int64}}","page":"Procedures implemented in the package","title":"Incertus.allocation_prb","text":"Function calculates allocation probabilities for MaxEnt, given treatment numbers.\n\nCall\n\nallocation_prb(rnd, N)\n\nArguments\n\nrnd::MaxEnt: an object, representing Maximum Entropy Constraint Balanced Randomiztion.\nN::Vector{Int64}: a vector of current treatment numbers.\n\n\n\n\n\n","category":"method"},{"location":"doc-08-auxiliary.html#Auxiliary-functions","page":"Auxiliary functions","title":"Auxiliary functions","text":"","category":"section"},{"location":"doc-08-auxiliary.html","page":"Auxiliary functions","title":"Auxiliary functions","text":"label(::Union{CompleteRandomization, RestrictedRandomization})","category":"page"},{"location":"doc-08-auxiliary.html#Incertus.label-Tuple{Union{CompleteRandomization, RestrictedRandomization}}","page":"Auxiliary functions","title":"Incertus.label","text":"Function sets a label for a randomization procedure. An example:\n\njulia> w = [1, 2, 3, 4]\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\njulia> dlr_proc = DLR(w, 2)\nDLR(2): restricted randomization procedure, targeting 1:2:3:4 allocation in 4-arm trial.\n\njulia> label(dlr_proc)\n\"DLR(2)\"\n\n\n\n\n\n","category":"method"},{"location":"doc-07-sim-example.html#Simulation-example","page":"Simulation example","title":"Simulation example","text":"","category":"section"},{"location":"doc-07-sim-example.html","page":"Simulation example","title":"Simulation example","text":"using Plots: savefig; nothing #hide\nusing Incertus\n\n# sample size\nnsbj = 40;\n\n# number of simulations\nnsim = 10000;\n\n# randomization procedures to be simulated\nrnd = [CRD(), PBD(1), BSD(3), EBCD(2//3)];\n\n# simulation run\nsr = simulate(rnd, nsbj, nsim);\n\n# calculating final imbalance, given simulations' output (`sr`) \nfinal_imb = calc_final_imb(sr);\n\n# calculating expected absolute imbalance vs. allocation step, given simulations' output (`sr`) \nexpected_abs_imb = calc_expected_abs_imb(sr);\n\n# making a violin plot of final imbalances \nviolin(final_imb)\nsavefig(\"violinplot.png\"); nothing #hide\n\n# making a plot of the exåected absolute imbalances \nplot(expected_abs_imb)\nsavefig(\"expected_absolute_imb_plot.png\"); nothing #hide","category":"page"},{"location":"doc-07-sim-example.html","page":"Simulation example","title":"Simulation example","text":"(Image: Violin plot of the final imbalance after all treatment assignmnets complete.)","category":"page"},{"location":"doc-07-sim-example.html","page":"Simulation example","title":"Simulation example","text":"(Image: expected absolute imbalance vs. allocation step)","category":"page"},{"location":"doc-04-simulation.html#Simulation","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"doc-04-simulation.html","page":"Simulation","title":"Simulation","text":"To perform simulations, the following functionality has been implemented:","category":"page"},{"location":"doc-04-simulation.html","page":"Simulation","title":"Simulation","text":"SimulatedRandomization","category":"page"},{"location":"doc-04-simulation.html#Incertus.SimulatedRandomization","page":"Simulation","title":"Incertus.SimulatedRandomization","text":"A type, representing an output of a simulated randomization procedure.\n\nA command SimulatedRandomization(target, label, trt, prb) initializes an instance of SimulatedRandomization:\n\ntarget is a vector of target allocation ratio;\nlabel is a string that describes the simulated randomization procedure; \ntrt is a matrix of size ntimes Ktimes S, representing treatment assignments;\nprb is an array of size ntimes Ktimes S, representing allocation probabilities,\n\nwhere \n\nn is the number of subjects simulated;\nK is the number of treatments simulated (equal to the length of the target allocation vector);\nS is the number of simulations performed.\n\n\n\n\n\n","category":"type"},{"location":"doc-04-simulation.html","page":"Simulation","title":"Simulation","text":"simulate(rnd::T, nsbj::Int64, nsim::Int64, seed::Int64 = 314159) where T <: Randomization","category":"page"},{"location":"doc-04-simulation.html#Incertus.simulate-Union{Tuple{T}, Tuple{T, Int64, Int64}, Tuple{T, Int64, Int64, Int64}} where T<:Randomization","page":"Simulation","title":"Incertus.simulate","text":"Function simulates a randomization procedure\n\nCall:\n\nsimulate(rnd, nsbj, nsim, seed)\n\nArguments\n\nrnd::T where T <: Randomization: an object, representing a randomization procedure to be simulated.\nnsbj::Int64: number of subjects simulated.\nnsim::Int64: number of simulations performed.\nseed::Int64: a random seed (for reproducibility); a default is set to 314159.\n\nResult\n\nan object, representing simlated randomization, an instance of SimulatedRandomization.\n\n\n\n\n\n","category":"method"},{"location":"doc-04-simulation.html","page":"Simulation","title":"Simulation","text":"simulate(rnd::DLUD, nsbj::Int64, nsim::Int64, seed::Int64 = 314159)","category":"page"},{"location":"doc-04-simulation.html#Incertus.simulate","page":"Simulation","title":"Incertus.simulate","text":"Function simulates a randomization procedure\n\nCall:\n\nsimulate(rnd, nsbj, nsim, seed)\n\nArguments\n\nrnd::DLUD : an object, representing a DLUD randomization procedure to be simulated.\nnsbj::Int64: number of subjects simulated.\nnsim::Int64: number of simulations performed.\nseed::Int64: a random seed (for reproducibility); a default is set to 314159.\n\nResult\n\nan object, representing simlated randomization, an instance of SimulatedRandomization.\n\n\n\n\n\n","category":"function"},{"location":"doc-04-simulation.html","page":"Simulation","title":"Simulation","text":"simulate(rnd::Vector{<:Randomization}, nsbj::Int64, nsim::Int64, seed::Int64 = 314159)","category":"page"},{"location":"doc-04-simulation.html#Incertus.simulate-2","page":"Simulation","title":"Incertus.simulate","text":"Function simulates a set of randomization procedures\n\nCall:\n\nsimulate(rnd, nsbj, nsim, seed)\n\nArguments\n\nrnd::Vector{<:Randomization}: a vector of instances of <:Randomization type; each instance represents a randomization procedure to be simulated.\nnsbj::Int64: number of subjects simulated.\nnsim::Int64: number of simulations performed.\nseed::Int64: a random seed (for reproducibility); a default is set to 314159.\n\nResult\n\na vector of instances of SimulatedRandomization type; each instance represents a simulated randomization procedure.\n\n\n\n\n\n","category":"function"},{"location":"doc-06-visualization.html#Visualizing-operational-characteristics","page":"Visualizing operational characteristics","title":"Visualizing operational characteristics","text":"","category":"section"},{"location":"doc-06-visualization.html","page":"Visualizing operational characteristics","title":"Visualizing operational characteristics","text":"plot(op::DataFrame; kwargs...)","category":"page"},{"location":"doc-06-visualization.html#Incertus.plot-Tuple{DataFrame}","page":"Visualizing operational characteristics","title":"Incertus.plot","text":"Function used to visualize simulated operational characteristics.\n\nCall\n\nplot(op; kwargs...)\n\nArguments\n\nop::DataFrame – a data frame, containing simulated operational characteristics; each column represents simulated output for a particular randomization procedure.\nkwargs refers to the kew words. Here, it is possible to pass key-value pairs supported by a StatsPlots.plot function.\n\nResult\n\nA plot of corresponding operational chacteristics vs. allocation step\n\n\n\n\n\n","category":"method"},{"location":"doc-06-visualization.html","page":"Visualizing operational characteristics","title":"Visualizing operational characteristics","text":"plot(op::ARP; kwargs...)","category":"page"},{"location":"doc-06-visualization.html#Incertus.plot-Tuple{ARP}","page":"Visualizing operational characteristics","title":"Incertus.plot","text":"Function used to visualize simulated operational characteristics.\n\nCall\n\nplot(op; kwargs...)\n\nArguments\n\nop::ARP – an instance of ARP, containing unconditional allocation probabilities.\nkwargs refers to the kew words. Here, it is possible to pass key-value pairs supported by a StatsPlots.plot function.\n\nResult\n\nA plot of corresponding operational chacteristics vs. allocation step\n\n\n\n\n\n","category":"method"},{"location":"doc-06-visualization.html","page":"Visualizing operational characteristics","title":"Visualizing operational characteristics","text":"plot(op::Vector{ARP}; kwargs...)","category":"page"},{"location":"doc-06-visualization.html#Incertus.plot-Tuple{Vector{ARP}}","page":"Visualizing operational characteristics","title":"Incertus.plot","text":"Function used to visualize simulated operational characteristics.\n\nCall\n\nplot(op; kwargs...)\n\nArguments\n\nop::Vector{ARP} – a vector of instances of ARP, each containing unconditional allocation probabilities.\nkwargs refers to the kew words. Here, it is possible to pass key-value pairs supported by a StatsPlots.plot function.\n\nResult\n\nA plot of corresponding operational chacteristics vs. allocation step\n\n\n\n\n\n","category":"method"},{"location":"doc-06-visualization.html","page":"Visualizing operational characteristics","title":"Visualizing operational characteristics","text":"heatmap(brt::DataFrame; kwargs...)","category":"page"},{"location":"doc-06-visualization.html#Incertus.heatmap-Tuple{DataFrame}","page":"Visualizing operational characteristics","title":"Incertus.heatmap","text":"Function used to visualize balance-randomness trade-off as a heatmap plot.\n\nCall\n\nheatmap(brt; kwargs...)\n\nArguments\n\nbrt::DataFrame – a data frame, containing simulated balance-randomness trade-off; each column represents simulated output for a particular randomization procedure.\nkwargs refers to the kew words. Here, it is possible to pass key-value pairs supported by a StatsPlots.heatmap function.\n\nResult\n\nA heatmap plot of the balance-randomness trade-off vs. allocation step\n\n\n\n\n\n","category":"method"},{"location":"doc-06-visualization.html","page":"Visualizing operational characteristics","title":"Visualizing operational characteristics","text":"violin(final_imb::DataFrame; kwargs...)","category":"page"},{"location":"doc-06-visualization.html#Incertus.violin-Tuple{DataFrame}","page":"Visualizing operational characteristics","title":"Incertus.violin","text":"Function used to visualize a distribution of the final imbalance as a violin plot.\n\nCall\n\nviolin(final_imb; kwargs...)\n\nArguments\n\nfinal_imb::DataFrame – a data frame, containing simulated final imbalances; each column represents simulated output for a particular randomization procedure.\nkwargs refers to the kew words. Here, it is possible to pass key-value pairs supported by a StatsPlots.violin function.\n\nResult\n\nA violin plot of the final imbalances.\n\n\n\n\n\n","category":"method"},{"location":"doc-01-one-to-one.html#Randomization,-targeting-*equal*-1:1-allocation","page":"Randomization, targeting equal  1:1 allocation","title":"Randomization, targeting equal  1:1 allocation","text":"","category":"section"},{"location":"doc-01-one-to-one.html","page":"Randomization, targeting equal  1:1 allocation","title":"Randomization, targeting equal  1:1 allocation","text":"The following settings are assumed:","category":"page"},{"location":"doc-01-one-to-one.html","page":"Randomization, targeting equal  1:1 allocation","title":"Randomization, targeting equal  1:1 allocation","text":"There are two treatment arms investigated in a trial:\nE is an experimental treatment arm.\nC is a control treatment arm.\nn is a total sample size.\nN_1(j) and N_2(j) are treatment numbers, i.e., sample sizes on treatments after the j^textth allocation step (N_1(j)+N_2(j) = j  j = 1 ldots n).\ndelta_j is a treatment indicator:","category":"page"},{"location":"doc-01-one-to-one.html","page":"Randomization, targeting equal  1:1 allocation","title":"Randomization, targeting equal  1:1 allocation","text":"delta_j = leftbeginarrayrl\n1 textif treatment E \n0 textif treatment C\nendarrayright ","category":"page"},{"location":"doc-01-one-to-one.html","page":"Randomization, targeting equal  1:1 allocation","title":"Randomization, targeting equal  1:1 allocation","text":"Under these assumptions, a restricted randomization procedure is defined as","category":"page"},{"location":"doc-01-one-to-one.html","page":"Randomization, targeting equal  1:1 allocation","title":"Randomization, targeting equal  1:1 allocation","text":"beginaligned\nphi_1 = Pr(delta_1 = 1) = 05 \nphi_j = Pr(delta_j = 1delta_1 ldots delta_j-1)  j = 2 ldots n\nendaligned","category":"page"},{"location":"index.html#Incertus.jl","page":"Incertus.jl","title":"Incertus.jl","text":"","category":"section"},{"location":"index.html","page":"Incertus.jl","title":"Incertus.jl","text":"The package Incertus.jl implements several restricted randomization procedures for two- and multi-arm clinical trials, targeting equal or unequal allocation. ","category":"page"},{"location":"index.html","page":"Incertus.jl","title":"Incertus.jl","text":"Pages = [\n    \"doc-01-one-to-one.md\",\n    \"doc-02-unequal.md\",\n    \"doc-03-implemented-procs.md\",\n    \"doc-04-simulation.md\",\n    \"doc-05-op.md\",\n    \"doc-06-visualization.md\",\n    \"doc-07-sim-example.md\",\n    \"doc-08-auxiliary.md\" \n]\nDepth = 3","category":"page"},{"location":"doc-05-op.html#Operational-characteristics","page":"Operational characteristics","title":"Operational characteristics","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"Several measures of imbalance and randomness have been implemented in the package:","category":"page"},{"location":"doc-05-op.html#Measures-of-imbalance","page":"Operational characteristics","title":"Measures of imbalance","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"Let us consider the following quantity as a measure of imbalance:","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"D(j) = N_E(j)-N_C(j)  textfor two-arm trial and 11 randomization  j = 1 2 ldots n","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"and","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"D(j) = sqrtsumlimits_k=1^K left(N_k(j)-jrho_kright)^2  textotherwise  j = 1 2 ldots n","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"where the latter is the Euclidean distance between the observed and the targeted allocation.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"The following measures of imbalance are available in the package.","category":"page"},{"location":"doc-05-op.html#Final-imbalance","page":"Operational characteristics","title":"Final imbalance","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"D(n) – final imbalance/distance (between the observed and targeted sample sizes) after all treatment assignments made.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_final_imb(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_final_imb-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_final_imb","text":"Function calculates final imbalance\n\nCall\n\ncalc_final_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA Vector of final imbalance values obtained via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_final_imb(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_final_imb-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_final_imb","text":"Function calculates final imbalance\n\nCall\n\ncalc_final_imb(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of simulated final imbalances' values obtained via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Expected-absolute-imbalance","page":"Operational characteristics","title":"Expected absolute imbalance","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"mathbfEleftD(j)right – expected absolute imbalance/distance (between the observed and targeted sample sizes) at the j^textth allocation step.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_expected_abs_imb(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_expected_abs_imb-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_expected_abs_imb","text":"Function calculates expected absolute imbalance vs. allocation step.\n\nCall\n\ncalc_expected_abs_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA Vector of expected absolute imbalance values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_expected_abs_imb(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_expected_abs_imb-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_expected_abs_imb","text":"Function calculates expected absolute imbalance vs. allocation step.\n\nCall\n\ncalc_expected_abs_imb(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of expected absolute imbalances' values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Variance-of-imbalance","page":"Operational characteristics","title":"Variance of imbalance","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"mathbfEleftD(j)^2right=mathbfvarleftN_E(j)-N_C(j)right or =sum_k=1^KmathbfvarleftN_k(j)right – variance of imbalance/total variance of the treatment sample sizes at the j^textth allocation step.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_variance_of_imb(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_variance_of_imb-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_variance_of_imb","text":"Function calculates variance of imbalance vs. allocation step.\n\nCall\n\ncalc_variance_of_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA Vector of variance of imbalance values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_variance_of_imb(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_variance_of_imb-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_variance_of_imb","text":"Function calculates variance of imbalance vs. allocation step.\n\nCall\n\ncalc_variance_of_imb(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of variances' of imbalance values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Expected-maximum-imbalance-over-first-allocation-steps","page":"Operational characteristics","title":"Expected maximum imbalance over first allocation steps","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"mathbfEleftmaxlimits_1leq m leq jD(m)right – expected maximum imbalance/distance (between the observed and the targeted treatment sample sizes) over the first j allocation steps.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_expected_max_abs_imb(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_expected_max_abs_imb-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_expected_max_abs_imb","text":"Function calculates expected maximum absolute imbalance over first allocations vs. allocation step.\n\nCall\n\ncalc_expected_max_abs_imb(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA Vector of expected maximum absolute imbalance over firat allocations values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_expected_max_abs_imb(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_expected_max_abs_imb-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_expected_max_abs_imb","text":"Function calculates expected maximum absolute imbalance over first allocations vs. allocation step.\n\nCall\n\ncalc_expected_max_abs_imb(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of expected maximum absolute imbalances' values (over first allocations) summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#A-cumulative-average-loss-over-the-first-allocation-steps","page":"Operational characteristics","title":"A cumulative average loss over the first allocation steps","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"Imb(j) = frac1jsumlimits_m=1^jfracmathbfEleftD(m)^2rightm – a cumulative average loss at the j^textth allocation step.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_cummean_loss(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_cummean_loss-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_cummean_loss","text":"Function calculates cumulative average loss vs. allocation step.\n\nCall\n\ncalc_cummean_loss(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA Vector of cumulative average loss' values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_cummean_loss(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_cummean_loss-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_cummean_loss","text":"Function calculates cumulative average loss vs. allocation step.\n\nCall\n\ncalc_cummean_loss(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of cumulative average losses' values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Measures-of-randomness","page":"Operational characteristics","title":"Measures of randomness","text":"","category":"section"},{"location":"doc-05-op.html#Cumulative-average-of-expected-proportions-of-correct-guesses-over-first-allocation-steps-under-*two*-different-guessing-strategies","page":"Operational characteristics","title":"Cumulative average of expected proportions of correct guesses over first allocation steps under two different guessing strategies","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"EPCG_conv(j) – cumulative average of expected proportions of correct guesses over first (j) allocation steps under the convergence guessing strategy. ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a two-arm trial with 11 target allocation, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"beginaligned\n    EPCG_conv(j) = frac1jsumlimits_m=1^jmathbfEleftG_m = delta_mright  j = 1 2 ldots n \n    textwhere G_m = left\n        beginarrayrl\n            1  D(m-1)  0 \n            sim Bernoulli(05)  D(m-1) = 0 \n            0  D(m-1)  0\n        endarray  \n    right \nendaligned    ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a multu-arm trial, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"beginaligned\n    EPCG_conv(j) = frac1jsumlimits_m=1^jmathbfEleftmathbfG_m = boldsymboldelta_mright  j = 1 2 ldots n \n    textwhere G_m sim Multinomialleft(1 mathbfPright) \n    textwhere mathbfP = left(fracleftDelta_1 = minlimits_1leq i leq KDelta_irightsum_k=1^KleftDelta_k = minlimits_1leq i leq KDelta_iright ldots fracleftDelta_K = minlimits_1leq i leq KDelta_irightsum_k=1^KleftDelta_k = minlimits_1leq i leq KDelta_irightright) \n    textwhere Delta_i = fracN_i(m)m-rho_i  i = 1 2 ldots K \nendaligned    ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"G_m (or mathbfG_m) is a random variable taking values based on the investigator's guess; if G_m = delta_m (mathbfG_m = boldsymboldelta_m), the guess is correct at the m^textth allocation step.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"EPCG_max(j) – cumulative average of expected proportions of correct guesses over first (j) allocation steps under the maximum probability guessing strategy.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a two-arm trial with 11 target allocation, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"beginaligned\nEPCG_max(j) = frac1jsumlimits_m=1^jmathbfEleftwidetildeG_m = delta_mright \ntextwhere widetildeG_m = left\n    beginarrayrl\n        1  phi_m  05 \n        sim Bernoulli(05)  phi_m = 05 \n        0  phi_m  05\n    endarray  \n    right \nendaligned","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a multu-arm trial, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"beginaligned\n    EPCG_max(j) = frac1jsumlimits_m=1^jmathbfEleftwidetildemathbfG_m = boldsymboldelta_mright  j = 1 2 ldots n \n    textwhere G_m sim Multinomialleft(1 mathbfPright) \n    textwhere mathbfP = left(fracleftP_1(m) = maxlimits_1leq i leq KP_i(m)rightsum_k=1^KleftP_k(m) = maxlimits_1leq i leq KP_k(m)right ldots fracleftP_K(m) = maxlimits_1leq i leq KP_i(m)rightsum_k=1^KleftP_k(m) = maxlimits_1leq i leq KP_i(m)rightright) \nendaligned    ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"widetildeG_m (or widetildemathbfG_m) is a random variable taking values based on the investigator's guess; if widetildeG_m = delta_m (widetildemathbfG_m = boldsymboldelta_m), the guess is correct at the m^textth allocation step.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_cummean_epcg(sr::SimulatedRandomization, gs::String)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_cummean_epcg-Tuple{SimulatedRandomization, String}","page":"Operational characteristics","title":"Incertus.calc_cummean_epcg","text":"Function calculates cumulative averages of expected proportions of correct guesses vs. allocation step.\n\nCall\n\ncalc_cummean_epcg(sr, gs)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\ngs::String: guessing strategy; accepts two values: \"C\" (corresponds to the convergence guessing strategy) of \"MP\" (corresponds to the maximum probability guessing strategy).\n\nResult\n\nA Vector of cumulative averages of the expected proportions of correct guesses summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_cummean_epcg(sr::Vector{SimulatedRandomization}, gs::String)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_cummean_epcg-Tuple{Vector{SimulatedRandomization}, String}","page":"Operational characteristics","title":"Incertus.calc_cummean_epcg","text":"Function calculates cumulative averages of expected proportions of correct guesses vs. allocation step.\n\nCall\n\ncalc_cummean_epcg(sr, gs)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\ngs::String: guessing strategy; accepts two values: \"C\" (corresponds to the convergence guessing strategy) of \"MP\" (corresponds to the maximum probability guessing strategy).\n\nResult\n\nA vector of cumulative averages of the expected proportions of correct guesses summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Cumulative-average-of-expected-proportions-of-deterministic-assignments-over-first-allocation-steps","page":"Operational characteristics","title":"Cumulative average of expected proportions of deterministic assignments over first allocation steps","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"PD(j) – cumulative average of expected proportions of deterministic assignments over first (j) allocation steps.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a two-arm trial with 11 target allocation, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"PD(j) = frac1jsumlimits_m=1^jPr(phi_min0 1)","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a multu-arm trial, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"beginaligned\nPD(j) = frac1jsumlimits_m=1^jPr(mathbfP(m)inmathbfe_1 mathbfe_2 ldots mathbfe_K) \ntextwhere mathbfe_k = (0 ldots underbrace1_k^textthtextelement ldots 0)  k = 1 2 ldots K\nendaligned","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_cummean_pda(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_cummean_pda-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_cummean_pda","text":"Function calculates cumulative averages of the proportions of deterministic assignments vs. allocation step.\n\nCall\n\ncalc_cummean_pda(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA vector of the cumulative averages of the proportions of deterministic assignmnets values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_cummean_pda(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_cummean_pda-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_cummean_pda","text":"Function calculates cumulative averages of the proportions of deterministic assignments vs. allocation step.\n\nCall\n\ncalc_cummean_pda(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of the cumulative averages of the proportions of deterministic assignmnets summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Forcing-index","page":"Operational characteristics","title":"Forcing index","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"FI(j) – forcing index, which takes values on a scale 0–1. ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a two-arm trial with 11 target allocation, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"FI(j) = frac4jsumlimits_m=1^jmathbfEleftphi_m-05right","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"Note that FI(j) = 0 forall j for CRD and FI(j) = 1 for PBD with a block size bs=2, assuming j is even (most balanced design). ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"For a multu-arm trial, it is defined as ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"FI(j) = frac1jsumlimits_m=1^jmathbfEleftsqrtsumlimits_k=1^Kleft(P_k(m)-rho_kright)^2right","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"Note that FI(j) = 0 forall j for CRD. ","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_fi(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_fi-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_fi","text":"Function calculates forcing index vs. allocation step.\n\nCall\n\ncalc_fi(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nA Vector of the forcing index values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_fi(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_fi-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_fi","text":"Function calculates forcing index vs. allocation step.\n\nCall\n\ncalc_fi(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of the forcing index values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Balance-randomness-trade-off","page":"Operational characteristics","title":"Balance-randomness trade-off","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"G(j) = sqrtleftImb(j)right^2 + leftFI(j)right^2 represents a balance-randomness trade-off at the j^textth allocation step. Lower values of G(j) indicate better balance–randomness trade-off.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"The following functions are available to deal with the characteristic.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_brt(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.calc_brt-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.calc_brt","text":"Function calculates balance-randomness trade-off vs. allocation step.\n\nCall\n\ncalc_brt(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, \n\nrepresenting simulation output.\n\nResult\n\nA Vector of balance-randomness trade-off measurement values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"calc_brt(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.calc_brt-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.calc_brt","text":"Function calculates balance-randomness trade-off vs. allocation step.\n\nCall\n\ncalc_brt(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA DataFrame of balance-randomness trade-off measurements' values summarized via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html#Allocation-ratio-preserving-property","page":"Operational characteristics","title":"Allocation ratio preserving property","text":"","category":"section"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"A procedure has an ARP property if","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"mathbfEleftP_k(j)right = rho_k  k = 1 2 ldots K  j = 1 2 ldots n","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"where P_k(j) is the conditional randomization probability for the k^textth  treatment group at the j^textth allocation step, and rho_k is a target allocation proportion for the k^textth tretament.","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"The following functionality is avalable to evaluate ARP property:","category":"page"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"ARP","category":"page"},{"location":"doc-05-op.html#Incertus.ARP","page":"Operational characteristics","title":"Incertus.ARP","text":"A data structure to deal with Allocation Ratio Preserving (ARP) property.\n\nIt has the following fields:\n\nlabel::String: a label for a randomization procedure that has been simulated.\nρ::Vector{Float64}: a vector of target allocation proportions.\nexpected_prb::Matrix{Float64}: expected values of P_k(j) evaluated via simulations.\n\n\n\n\n\n","category":"type"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"eval_arp(sr::SimulatedRandomization)","category":"page"},{"location":"doc-05-op.html#Incertus.eval_arp-Tuple{SimulatedRandomization}","page":"Operational characteristics","title":"Incertus.eval_arp","text":"Function evaluates allocation ratio preserving (ARP) property, i.e., calculates unconditional allocation probabilities. A procedure has an ARP property if\n\nCall\n\neval_arp(sr)\n\nArguments\n\nsr::SimulatedRandomization: an instance of SimulatedRandomization, an object, representing simulation output.\n\nResult\n\nAn instance of  ARP type, summarizing the expected values of P_k(j) via simulations.\n\n\n\n\n\n","category":"method"},{"location":"doc-05-op.html","page":"Operational characteristics","title":"Operational characteristics","text":"eval_arp(sr::Vector{SimulatedRandomization})","category":"page"},{"location":"doc-05-op.html#Incertus.eval_arp-Tuple{Vector{SimulatedRandomization}}","page":"Operational characteristics","title":"Incertus.eval_arp","text":"Function evaluates allocation ratio preserving (ARP) property, i.e., calculates unconditional allocation probabilities. \n\nCall\n\neval_arp(sr)\n\nArguments\n\nsr::Vector{SimulatedRandomization}: a vector of instances of SimulatedRandomization, representing simulation output.\n\nResult\n\nA Vector{ARP} object – a vector of instances of ARP, each summarizing expected values of P_k(j) via simulations.\n\n\n\n\n\n","category":"method"}]
}
